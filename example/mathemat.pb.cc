// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mathemat.proto

#include "mathemat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace math {
class AddNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNum> _instance;
} _AddNum_default_instance_;
class resultNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<resultNum> _instance;
} _resultNum_default_instance_;
}  // namespace math
static void InitDefaultsscc_info_AddNum_mathemat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::math::_AddNum_default_instance_;
    new (ptr) ::math::AddNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::math::AddNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddNum_mathemat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddNum_mathemat_2eproto}, {}};

static void InitDefaultsscc_info_resultNum_mathemat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::math::_resultNum_default_instance_;
    new (ptr) ::math::resultNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::math::resultNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_resultNum_mathemat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_resultNum_mathemat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mathemat_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mathemat_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_mathemat_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mathemat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::math::AddNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::math::AddNum, num_first_),
  PROTOBUF_FIELD_OFFSET(::math::AddNum, num_sencond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::math::resultNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::math::resultNum, num_result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::math::AddNum)},
  { 7, -1, sizeof(::math::resultNum)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::math::_AddNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::math::_resultNum_default_instance_),
};

const char descriptor_table_protodef_mathemat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016mathemat.proto\022\004math\"0\n\006AddNum\022\021\n\tnum_"
  "first\030\001 \001(\005\022\023\n\013num_sencond\030\002 \001(\005\"\037\n\tresu"
  "ltNum\022\022\n\nnum_result\030\001 \001(\00523\n\010addition\022\'\n"
  "\006GetAdd\022\014.math.AddNum\032\017.math.resultNumB\003"
  "\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mathemat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mathemat_2eproto_sccs[2] = {
  &scc_info_AddNum_mathemat_2eproto.base,
  &scc_info_resultNum_mathemat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mathemat_2eproto_once;
static bool descriptor_table_mathemat_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mathemat_2eproto = {
  &descriptor_table_mathemat_2eproto_initialized, descriptor_table_protodef_mathemat_2eproto, "mathemat.proto", 171,
  &descriptor_table_mathemat_2eproto_once, descriptor_table_mathemat_2eproto_sccs, descriptor_table_mathemat_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_mathemat_2eproto::offsets,
  file_level_metadata_mathemat_2eproto, 2, file_level_enum_descriptors_mathemat_2eproto, file_level_service_descriptors_mathemat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mathemat_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mathemat_2eproto), true);
namespace math {

// ===================================================================

void AddNum::InitAsDefaultInstance() {
}
class AddNum::_Internal {
 public:
};

AddNum::AddNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:math.AddNum)
}
AddNum::AddNum(const AddNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_first_, &from.num_first_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sencond_) -
    reinterpret_cast<char*>(&num_first_)) + sizeof(num_sencond_));
  // @@protoc_insertion_point(copy_constructor:math.AddNum)
}

void AddNum::SharedCtor() {
  ::memset(&num_first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sencond_) -
      reinterpret_cast<char*>(&num_first_)) + sizeof(num_sencond_));
}

AddNum::~AddNum() {
  // @@protoc_insertion_point(destructor:math.AddNum)
  SharedDtor();
}

void AddNum::SharedDtor() {
}

void AddNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNum& AddNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNum_mathemat_2eproto.base);
  return *internal_default_instance();
}


void AddNum::Clear() {
// @@protoc_insertion_point(message_clear_start:math.AddNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sencond_) -
      reinterpret_cast<char*>(&num_first_)) + sizeof(num_sencond_));
  _internal_metadata_.Clear();
}

const char* AddNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_sencond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_sencond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:math.AddNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_first = 1;
  if (this->num_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_first(), target);
  }

  // int32 num_sencond = 2;
  if (this->num_sencond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_sencond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:math.AddNum)
  return target;
}

size_t AddNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:math.AddNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_first = 1;
  if (this->num_first() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_first());
  }

  // int32 num_sencond = 2;
  if (this->num_sencond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_sencond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:math.AddNum)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:math.AddNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:math.AddNum)
    MergeFrom(*source);
  }
}

void AddNum::MergeFrom(const AddNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:math.AddNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_first() != 0) {
    _internal_set_num_first(from._internal_num_first());
  }
  if (from.num_sencond() != 0) {
    _internal_set_num_sencond(from._internal_num_sencond());
  }
}

void AddNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:math.AddNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNum::CopyFrom(const AddNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:math.AddNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNum::IsInitialized() const {
  return true;
}

void AddNum::InternalSwap(AddNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_first_, other->num_first_);
  swap(num_sencond_, other->num_sencond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void resultNum::InitAsDefaultInstance() {
}
class resultNum::_Internal {
 public:
};

resultNum::resultNum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:math.resultNum)
}
resultNum::resultNum(const resultNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_result_ = from.num_result_;
  // @@protoc_insertion_point(copy_constructor:math.resultNum)
}

void resultNum::SharedCtor() {
  num_result_ = 0;
}

resultNum::~resultNum() {
  // @@protoc_insertion_point(destructor:math.resultNum)
  SharedDtor();
}

void resultNum::SharedDtor() {
}

void resultNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const resultNum& resultNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_resultNum_mathemat_2eproto.base);
  return *internal_default_instance();
}


void resultNum::Clear() {
// @@protoc_insertion_point(message_clear_start:math.resultNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_result_ = 0;
  _internal_metadata_.Clear();
}

const char* resultNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* resultNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:math.resultNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_result = 1;
  if (this->num_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:math.resultNum)
  return target;
}

size_t resultNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:math.resultNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_result = 1;
  if (this->num_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void resultNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:math.resultNum)
  GOOGLE_DCHECK_NE(&from, this);
  const resultNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<resultNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:math.resultNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:math.resultNum)
    MergeFrom(*source);
  }
}

void resultNum::MergeFrom(const resultNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:math.resultNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_result() != 0) {
    _internal_set_num_result(from._internal_num_result());
  }
}

void resultNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:math.resultNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resultNum::CopyFrom(const resultNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:math.resultNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resultNum::IsInitialized() const {
  return true;
}

void resultNum::InternalSwap(resultNum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_result_, other->num_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata resultNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

addition::~addition() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* addition::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mathemat_2eproto);
  return file_level_service_descriptors_mathemat_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* addition::GetDescriptor() {
  return descriptor();
}

void addition::GetAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::math::AddNum*,
                         ::math::resultNum*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAdd() not implemented.");
  done->Run();
}

void addition::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_mathemat_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetAdd(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::math::AddNum*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::math::resultNum*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& addition::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::math::AddNum::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& addition::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::math::resultNum::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

addition_Stub::addition_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
addition_Stub::addition_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
addition_Stub::~addition_Stub() {
  if (owns_channel_) delete channel_;
}

void addition_Stub::GetAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::math::AddNum* request,
                              ::math::resultNum* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace math
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::math::AddNum* Arena::CreateMaybeMessage< ::math::AddNum >(Arena* arena) {
  return Arena::CreateInternal< ::math::AddNum >(arena);
}
template<> PROTOBUF_NOINLINE ::math::resultNum* Arena::CreateMaybeMessage< ::math::resultNum >(Arena* arena) {
  return Arena::CreateInternal< ::math::resultNum >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
